import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
from sklearn.naive_bayes import GaussianNB

# Load dataset
data = pd.read_csv('breast-cancer.csv')

# Preprocess data
imputer = SimpleImputer(strategy='mean')
data_clean = imputer.fit_transform(data)
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data_clean)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data_scaled[:, :-1], data_scaled[:, -1], test_size=0.3, random_state=42)

# Function to calculate and print metrics
def print_metrics(y_test, y_pred, model_name):
    accuracy = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    roc_auc = roc_auc_score(y_test, y_pred)
    
    print(f"{model_name} Performance Metrics:")
    print(f"Accuracy: {accuracy:.4f}")
    print(f"Precision: {precision:.4f}")
    print(f"Recall: {recall:.4f}")
    print(f"F1 Score: {f1:.4f}")
    print(f"ROC AUC: {roc_auc:.4f}")
    print("-" * 50)

# Train and evaluate Logistic Regression model
log_model = LogisticRegression()
log_model.fit(X_train, y_train)
y_pred_log = log_model.predict(X_test)
print_metrics(y_test, y_pred_log, "Logistic Regression")

# Train and evaluate Decision Tree model
tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(X_train, y_train)
y_pred_tree = tree_model.predict(X_test)
print_metrics(y_test, y_pred_tree, "Decision Tree")

# Train and evaluate Random Forest model
rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
print_metrics(y_test, y_pred_rf, "Random Forest")

# Train and evaluate Bayesian Network (using Gaussian Naive Bayes as a simple approximation)
bayes_model = GaussianNB()
bayes_model.fit(X_train, y_train)
y_pred_bayes = bayes_model.predict(X_test)
print_metrics(y_test, y_pred_bayes, "Bayesian Network (Naive Bayes)")


